package JavaApp;

import java.sql.DriverManager;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue; 

import java.io.FileReader;
import java.util.Iterator;

import org.json.simple.parser.JSONParser;

import twitter4j.*;
import twitter4j.auth.AccessToken;

public class JDBCExample {

	public static void parse_json(String API, String account_name,String language, String date,
			ArrayList <String> kw , ArrayList <String> ht , ArrayList <String> usr , ArrayList <String> reply_to,
			ArrayList<String> bb,int hr[],int []nb_rt 
			)
	{

		JSONParser parser = new JSONParser();

		String ap="", account="",lang="",dat="";
		JSONArray keywords,retweets, hour,answer_to,users,bounding_box;

		try {

			Object obj = parser.parse(new FileReader(
					"C:/xampp/htdocs/SSAFProject/Controlers/recherche.json"));

			JSONObject jsonObject = (JSONObject) obj;

			ap = (String) jsonObject.get("API");
			account = (String) jsonObject.get("compte_API");
			keywords = (JSONArray) jsonObject.get("keywords");
			language = (String) jsonObject.get("language");
			retweets = (JSONArray) jsonObject.get("retweets_from_to");
			date = (String)jsonObject.get("date");
			hour = (JSONArray) jsonObject.get("hour_from_to");
			answer_to = (JSONArray) jsonObject.get("answer_to");
			users = (JSONArray) jsonObject.get("users");
			bounding_box = (JSONArray) jsonObject.get("bounding_box");

			if(keywords != null)
			{
				Iterator<String> it = keywords.iterator();
				while (it.hasNext()) {
					if(it.next().indexOf("#") == 0)
						ht.add(it.next());
					else 
						kw.add(it.next());
					//System.out.print(it1.next() + " ");
				}
			}

			if(users != null)
			{
				Iterator<String> it = usr.iterator();
				while (it.hasNext()) {
					usr.add(it.next());
				}
			}
			if(answer_to != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<String> it = answer_to.iterator();
				while (it.hasNext()) {
					reply_to.add(it.next());
				}
			}
			if(bounding_box != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<String> it = bounding_box.iterator();
				while (it.hasNext()) {
					bb.add(it.next());
				}
			}
			if(retweets != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<Long> it = retweets.iterator();
				int i=0;
				while (it.hasNext()) {
					nb_rt[i]= it.next().intValue();
					i++;
				}
			}
			if(hour != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<Long> it = hour.iterator();
				int i=0;
				while (it.hasNext()) {
					hr[i]= it.next().intValue();
					//System.out.println(it.next());
					i++;
				}
			}
			if (! (lang.equals("")))
				language = lang;
			if(! (dat.equals("")))
				date = dat;
			API = ap;
			account_name = account;

		} 
		catch (Exception e) {
			e.printStackTrace();
		}

	}
	public static void main(String[] argv) throws Exception {

		String API="", account_name="",language="",date="";

		ArrayList <String> kw = new ArrayList<String>(),ht = new ArrayList<String>()
				,usr = new ArrayList<String>(),reply_to =new ArrayList<String>(),bounding_box =new ArrayList<String>();
		int hr[] = new int[2];
		int nb_rt[] = new int[2];


		/*****PARSER DU FICHIER DE RECHERCHE****/
		JSONParser parser = new JSONParser();

		String ap="", account="",lang="",dat="";
		JSONArray keywords,retweets, hour,answer_to,users,bb;

		try {

			Object obj = parser.parse(new FileReader(
					"C:/xampp/htdocs/SSAFProject/Controlers/recherche.json"));

			JSONObject jsonObject = (JSONObject) obj;

			ap = (String) jsonObject.get("API");
			account = (String) jsonObject.get("compte_API");
			keywords = (JSONArray) jsonObject.get("keywords");
			language = (String) jsonObject.get("language");
			retweets = (JSONArray) jsonObject.get("retweets_from_to");
			date = (String)jsonObject.get("date");
			hour = (JSONArray) jsonObject.get("hour_from_to");
			answer_to = (JSONArray) jsonObject.get("answer_to");
			users = (JSONArray) jsonObject.get("users");
			bb = (JSONArray) jsonObject.get("bounding_box");

			if(keywords != null)
			{
				Iterator<String> it = keywords.iterator();
				while (it.hasNext()) {
					if(it.next().indexOf("#") == 0)
						ht.add(it.next());
					else 
						kw.add(it.next());
					//System.out.print(it1.next() + " ");
				}
			}

			if(users != null)
			{
				Iterator<String> it = usr.iterator();
				while (it.hasNext()) {
					usr.add(it.next());
				}
			}
			if(answer_to != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<String> it = answer_to.iterator();
				while (it.hasNext()) {
					reply_to.add(it.next());
				}
			}
			if(bb != null)
			{
				Iterator<String> it = bounding_box.iterator();
				while (it.hasNext()) {
					bounding_box.add(it.next());
				}
			}
			if(retweets != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<Long> it = retweets.iterator();
				int i=0;
				while (it.hasNext()) {
					nb_rt[i]= it.next().intValue();
					i++;
				}
			}
			if(hour != null)
			{
				@SuppressWarnings("unchecked")
				Iterator<Long> it = hour.iterator();
				int i=0;
				while (it.hasNext()) {
					hr[i]= it.next().intValue();
					//System.out.println(it.next());
					i++;
				}
			}
			if (! (lang.equals("")))
				language = lang;
			if(! (dat.equals("")))
				date = dat;
			API = ap;
			account_name = account;

		} 
		catch (Exception e) {
			e.printStackTrace();
		}

		/*********************************END PARSER**************************/
		
		/*********************************CONNEXION A LA BDD & RECHERCHES******************************/
		Connection connexion = null;
		Statement stmt = null;
		if(API.equals("rest"))
		{
			Rest_search r = new Rest_search();
			try {

				connexion = DriverManager.getConnection(
						"jdbc:postgresql://localhost:5432/extractstweet", "postgres",
						"s");
				stmt = connexion.createStatement();
				
				String sql ="SELECT * FROM \"Info_user_app\" WHERE account_name = '"+account_name+"'";
				ResultSet rs = stmt.executeQuery(sql);

				while(rs.next()){
					//Retrieve by column name
					int id = rs.getInt("id_iua");
					String ck = rs.getString("consumer_key");
					String cks = rs.getString("consumer_secret");
					String at = rs.getString("access_token");
					String ats = rs.getString("access_token_secret");


					User_info ui = new User_info(id,ck,cks,at,ats);
					r.setUi(ui);
					//r.add_user("bastokova");
					//r.add_user("lezybeatz");
					//Display values
				}
				//recuperer les paramètres de chaque bounding box à travers son nom, cree une classe bounding box pour chak
				// et inserer les classe bb dans la recherche
				rs.close();
				System.out.println("Connexion effective !");
			}catch(SQLException se){
				//Handle errors for JDBC
				se.printStackTrace();
			}catch(Exception e){
				//Handle errors for Class.forName
				e.printStackTrace();
			}finally{
				//finally block used to close resources
				try{
					if(stmt!=null)
						connexion.close();
				}catch(SQLException se){
				}// do nothing
				try{
					if(connexion!=null)
						connexion.close();
				}catch(SQLException se){
					se.printStackTrace();
				}//end finally try
			}//end try

			for(int i=0;i<usr.size();i++)
				r.add_user(usr.get(i));
			for(int i=0;i<reply_to.size();i++)
				r.add_in_reply(reply_to.get(i));
			for(int i=0;i<kw.size();i++)
				r.add_kw(kw.get(i));
			for(int i=0;i<ht.size();i++)
				r.add_kw(ht.get(i));
			r.setLanguage(language);
			r.setDate(date);
			
			r.search_and_insert();
			return;
		}
		//				Rest_search r = new Rest_search();
		//						User_info ui = new User_info(CONSUMER_KEY, CONSUMER_SECRET,ACCESS_TOKEN, ACCESS_TOKEN_SECRET);
		//						r.setUi(ui);
		//				r.add_user("bastokova");
		//				r.add_user("lezybeatz");
		//				//r.setHour_min(13);
		//				//r.setHour_max(17);
		//				
		//				//r.add_kw("Prod");
		//				//r.setDate("2011-01-07");
		//				//r.add_ht("#EBOLA");
		//				r.search_and_insert();



	}

}